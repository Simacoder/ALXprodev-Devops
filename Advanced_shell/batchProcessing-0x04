#!/bin/bash
# Parallel PokÃ©mon Data Retrieval Script with Process Management

POKEMONS=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"

mkdir -p "$OUTPUT_DIR"

# Store background job PIDs
PIDS=()

# Cleanup function to terminate background jobs on exit
cleanup() {
    echo "Cleaning up background processes..."
    for pid in "${PIDS[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
        fi
    done
    wait
    echo "Cleanup complete."
}
trap cleanup EXIT

fetch_pokemon() {
    local pokemon=$1
    echo "Fetching data for $pokemon..."
    RESPONSE=$(curl -s -w "%{http_code}" -o "$OUTPUT_DIR/$pokemon.json" "$API_URL/$pokemon")
    STATUS=${RESPONSE: -3}

    if [ "$STATUS" == "200" ]; then
        echo "Saved data to $OUTPUT_DIR/${pokemon}.json "
    else
        echo "Failed to fetch data for $pokemon  (HTTP $STATUS)" >&2
        rm -f "$OUTPUT_DIR/$pokemon.json"
    fi
}

# Launch fetches in background
for pokemon in "${POKEMONS[@]}"; do
    fetch_pokemon "$pokemon" &
    PIDS+=("$!")  # Track PID
done

# Wait for all background jobs
for pid in "${PIDS[@]}"; do
    wait "$pid"
done

echo "All data fetch operations complete."
