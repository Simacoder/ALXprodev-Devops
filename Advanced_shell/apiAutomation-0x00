#!/bin/bash
# PokÃ©mon API Request Script


POKEMON_NAME=${1:-pikachu}
API_URL="https://pokeapi.co/api/v2/pokemon/$POKEMON_NAME"
OUTPUT_FILE="data.json"
ERROR_FILE="errors.txt"
MAX_RETRIES=3
RETRY_DELAY=2

# Function to log errors
log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >> "$ERROR_FILE"
    echo "Error: $1" >&2
}

# Check if curl is available
if ! command -v curl &>/dev/null; then
    log_error "curl is not installed. Please install curl first."
    exit 1
fi

# Check if jq is available for JSON validation
if ! command -v jq &>/dev/null; then
    log_error "jq is not installed. Basic JSON validation will be used."
fi

# Make API request with retries
for ((i=1; i<=$MAX_RETRIES; i++)); do
    response=$(curl -s -S -f -w "\n%{http_code}" "$API_URL" 2>> "$ERROR_FILE")
    status_code=$(echo "$response" | tail -n1)
    json_response=$(echo "$response" | sed '$d')
    
    # Check if we got a successful response
    if [[ "$status_code" -eq 200 ]]; then
        # Validate JSON (use jq if available, otherwise basic check)
        if command -v jq &>/dev/null; then
            if ! jq -e . >/dev/null 2>&1 <<< "$json_response"; then
                log_error "Invalid JSON response (attempt $i/$MAX_RETRIES)"
                sleep $RETRY_DELAY
                continue
            fi
        else
            if [[ ! "$json_response" =~ ^\{.*\}$ ]]; then
                log_error "Basic JSON validation failed (attempt $i/$MAX_RETRIES)"
                sleep $RETRY_DELAY
                continue
            fi
        fi
        
        # Save successful response
        echo "$json_response" > "$OUTPUT_FILE"
        echo "Successfully saved data to $OUTPUT_FILE"
        exit 0
    else
        log_error "API request failed with HTTP $status_code (attempt $i/$MAX_RETRIES)"
        sleep $RETRY_DELAY
    fi
done

log_error "Failed to get valid response after $MAX_RETRIES attempts"
exit 1