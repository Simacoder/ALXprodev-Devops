#!/bin/bash

# API Request Automation Script
# Fetches Pokémon data from the Pokémon API and saves to JSON file
# Author: ALXprodev-Devops
# File: apiAutomation-0x00

# Configuration
POKEMON_NAME="pikachu"
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_FILE="data.json"
ERROR_FILE="errors.txt"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to log errors
log_error() {
    local error_message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] ERROR: $error_message" >> "$ERROR_FILE"
    echo -e "${RED}Error: $error_message${NC}" >&2
}

# Function to log success
log_success() {
    local message="$1"
    echo -e "${GREEN}Success: $message${NC}"
}

# Function to log info
log_info() {
    local message="$1"
    echo -e "${YELLOW}Info: $message${NC}"
}

# Main function to fetch Pokémon data
fetch_pokemon_data() {
    local pokemon="$1"
    local url="${API_BASE_URL}/${pokemon}"
    
    log_info "Fetching data for Pokémon: $pokemon"
    log_info "API URL: $url"
    
    # Make the API request using curl
    # -s: silent mode
    # -S: show errors even in silent mode
    # -f: fail silently on HTTP errors
    # -w: write response code to check success
    local response_code
    local api_response
    
    # Capture both response and HTTP status code
    api_response=$(curl -s -S -w "%{http_code}" "$url" 2>/dev/null)
    response_code="${api_response: -3}"  # Last 3 characters are the HTTP status code
    api_response="${api_response%???}"   # Remove last 3 characters to get actual response
    
    # Check if curl command succeeded
    if [ $? -ne 0 ]; then
        log_error "Failed to connect to API. Check your internet connection."
        return 1
    fi
    
    # Check HTTP response code
    if [ "$response_code" -ne 200 ]; then
        case "$response_code" in
            404)
                log_error "Pokémon '$pokemon' not found (HTTP 404)"
                ;;
            429)
                log_error "Rate limit exceeded (HTTP 429). Please try again later."
                ;;
            500)
                log_error "API server error (HTTP 500). Please try again later."
                ;;
            *)
                log_error "API request failed with HTTP status code: $response_code"
                ;;
        esac
        return 1
    fi
    
    # Validate JSON response
    if ! echo "$api_response" | jq empty 2>/dev/null; then
        log_error "Invalid JSON response received from API"
        return 1
    fi
    
    # Save response to file
    echo "$api_response" > "$OUTPUT_FILE"
    
    if [ $? -eq 0 ]; then
        log_success "Data successfully saved to $OUTPUT_FILE"
        
        # Display basic info about the saved data
        local pokemon_name=$(echo "$api_response" | jq -r '.name' 2>/dev/null)
        local pokemon_id=$(echo "$api_response" | jq -r '.id' 2>/dev/null)
        local pokemon_height=$(echo "$api_response" | jq -r '.height' 2>/dev/null)
        local pokemon_weight=$(echo "$api_response" | jq -r '.weight' 2>/dev/null)
        
        log_info "Pokémon Name: $pokemon_name"
        log_info "Pokémon ID: $pokemon_id"
        log_info "Height: $pokemon_height decimetres"
        log_info "Weight: $pokemon_weight hectograms"
        log_info "File size: $(wc -c < "$OUTPUT_FILE") bytes"
        
        return 0
    else
        log_error "Failed to save data to $OUTPUT_FILE"
        return 1
    fi
}

# Function to check prerequisites
check_prerequisites() {
    # Check if curl is installed
    if ! command -v curl &> /dev/null; then
        log_error "curl is required but not installed. Please install curl first."
        echo "  Ubuntu/Debian: sudo apt-get install curl"
        echo "  CentOS/RHEL: sudo yum install curl"
        echo "  macOS: curl is usually pre-installed"
        return 1
    fi
    
    # Check if jq is available (optional, for JSON validation)
    if ! command -v jq &> /dev/null; then
        log_info "jq is not installed. JSON validation will be skipped."
        log_info "To install jq:"
        echo "  Ubuntu/Debian: sudo apt-get install jq"
        echo "  CentOS/RHEL: sudo yum install jq"
        echo "  macOS: brew install jq"
    fi
    
    return 0
}

# Function to display usage
show_usage() {
    echo "Usage: $0 [pokemon_name]"
    echo ""
    echo "Options:"
    echo "  pokemon_name    Name of the Pokémon to fetch (default: pikachu)"
    echo ""
    echo "Examples:"
    echo "  $0                # Fetch data for Pikachu"
    echo "  $0 charizard     # Fetch data for Charizard"
    echo "  $0 bulbasaur     # Fetch data for Bulbasaur"
    echo ""
    echo "Files created:"
    echo "  $OUTPUT_FILE     # JSON data from API"
    echo "  $ERROR_FILE      # Error log (created only if errors occur)"
}

# Function to clean up old files
cleanup_old_files() {
    if [ -f "$OUTPUT_FILE" ]; then
        log_info "Removing existing $OUTPUT_FILE"
        rm "$OUTPUT_FILE"
    fi
}

# Main execution
main() {
    # Parse command line arguments
    if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        show_usage
        exit 0
    fi
    
    # Use provided Pokémon name or default to pikachu
    local target_pokemon="${1:-$POKEMON_NAME}"
    
    echo "=== Pokémon API Request Automation ==="
    echo "Target Pokémon: $target_pokemon"
    echo "Output file: $OUTPUT_FILE"
    echo "Error log: $ERROR_FILE"
    echo "======================================="
    echo ""
    
    # Check prerequisites
    if ! check_prerequisites; then
        exit 1
    fi
    
    # Clean up old files
    cleanup_old_files
    
    # Fetch Pokémon data
    if fetch_pokemon_data "$target_pokemon"; then
        echo ""
        log_success "Script completed successfully!"
        echo ""
        echo "To view the data, you can use:"
        echo "  jq . < $OUTPUT_FILE | head -n 50"
        echo "  cat $OUTPUT_FILE"
        echo ""
        exit 0
    else
        echo ""
        log_error "Script failed. Check $ERROR_FILE for details."
        exit 1
    fi
}

# Execute main function with all arguments
main "$@"
