#!/bin/bash

# Pokémon Data Extraction Script
# Extracts name, height, weight, and type using jq and sed
# Author: Simanga Mchunu
# File: data_extraction_automation-0x01

# Configuration
JSON_FILE="data.json"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Check if JSON file exists
check_json_file() {
    if [ ! -f "$JSON_FILE" ]; then
        echo -e "${RED}Error: $JSON_FILE not found!${NC}" >&2
        echo "Please run apiAutomation-0x00 first to generate the JSON file." >&2
        exit 1
    fi
}

# Validate JSON using jq
validate_json() {
    if ! jq empty "$JSON_FILE" &>/dev/null; then
        echo -e "${RED}Error: Invalid JSON format in $JSON_FILE${NC}" >&2
        exit 1
    fi
}

# Extract data using jq
extract_name() {
    jq -r '.name' "$JSON_FILE" 2>/dev/null | sed 's/.*/\L&/; s/\b./\u&/'
}

extract_height() {
    jq -r '.height/10 | tostring | sub("\\.?0+$"; "")' "$JSON_FILE" 2>/dev/null
}

extract_weight() {
    jq -r '.weight/10 | floor | tostring' "$JSON_FILE" 2>/dev/null
}

extract_type() {
    jq -r '.types[0].type.name | ascii_upcase | sub("^(.).*"; "\\1") + sub("^."; "")' "$JSON_FILE" 2>/dev/null
}

# Format output as required
format_output() {
    local name="$1"
    local height="$2"
    local weight="$3"
    local type="$4"

    echo "${name} is of type ${type}, weighs ${weight}kg, and is ${height}m tall."
}

# Main function
main() {
    check_json_file
    validate_json

    local pokemon_name=$(extract_name)
    local pokemon_height=$(extract_height)
    local pokemon_weight=$(extract_weight)
    local pokemon_type=$(extract_type)

    if [[ -z "$pokemon_name" || -z "$pokemon_height" || -z "$pokemon_weight" || -z "$pokemon_type" ]]; then
        echo -e "${RED}Error: Failed to extract Pokémon data${NC}" >&2
        exit 1
    fi

    format_output "$pokemon_name" "$pokemon_height" "$pokemon_weight" "$pokemon_type"
}

main