#!/bin/bash
# Pokémon Data Extraction Script
# Author: Simanga Mchunu
# File: data_extraction_automation-0x01

# Configuration
JSON_FILE="data.json"
REQUIRED_FORMAT="${name} is of type ${type}, weighs ${formatted_weight}kg, and is ${formatted_height}m tall."

# Color definitions for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Validate JSON file exists and is readable
validate_input_file() {
    if [[ ! -f "$JSON_FILE" ]]; then
        echo -e "${RED}ERROR: Missing JSON file${NC}" >&2
        echo -e "${YELLOW}Please ensure $JSON_FILE exists in the current directory${NC}" >&2
        exit 1
    fi

    if [[ ! -r "$JSON_FILE" ]]; then
        echo -e "${RED}ERROR: Cannot read JSON file${NC}" >&2
        echo -e "${YELLOW}Check file permissions for $JSON_FILE${NC}" >&2
        exit 1
    fi
}

# Extract and format Pokémon data with precise output requirements
extract_pokemon_data() {
    local name type formatted_weight formatted_height

    # Extract raw data with error handling
    name=$(jq -e -r '.name' "$JSON_FILE" 2>/dev/null || {
        echo -e "${RED}ERROR: Failed to extract Pokémon name${NC}" >&2
        exit 1
    })

    height=$(jq -e -r '.height/10' "$JSON_FILE" 2>/dev/null || {
        echo -e "${RED}ERROR: Failed to extract height data${NC}" >&2
        exit 1
    })

    weight=$(jq -e -r '.weight/10' "$JSON_FILE" 2>/dev/null || {
        echo -e "${RED}ERROR: Failed to extract weight data${NC}" >&2
        exit 1
    })

    type=$(jq -e -r '.types[0].type.name' "$JSON_FILE" 2>/dev/null || {
        echo -e "${RED}ERROR: Failed to extract type data${NC}" >&2
        exit 1
    })

    # Format values precisely as required
    formatted_name=$(echo "$name" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')
    formatted_height=$(printf "%.1f" "$height")
    formatted_weight=$(printf "%.0f" "$weight")
    formatted_type=$(echo "$type" | awk '{print toupper(substr($0,1,1)) substr($0,2)}')

    # Verify all values were obtained
    if [[ -z "$formatted_name" || -z "$formatted_height" || -z "$formatted_weight" || -z "$formatted_type" ]]; then
        echo -e "${RED}ERROR: Incomplete Pokémon data${NC}" >&2
        exit 1
    fi

    # Construct output exactly matching required format
    printf "%s is of type %s, weighs %skg, and is %sm tall.\\n" \
        "$formatted_name" \
        "$formatted_type" \
        "$formatted_weight" \
        "$formatted_height"
}

# Main execution flow
main() {
    validate_input_file
    extract_pokemon_data
}

main